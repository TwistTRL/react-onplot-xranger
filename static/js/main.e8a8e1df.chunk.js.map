{"version":3,"sources":["lib/DragOverlay.js","lib/index.js","lib/OnPlotXRanger.js","index.js"],"names":["DragOverlay","handleMouseMove","ev","preventDefault","stopPropagation","mouseMoveHandler","_this","props","handleMouseUp","mouseUpHandler","cursor","this","react_default","a","createElement","className","style","document","addEventListener","removeEventListener","PureComponent","OnPlotXRanger","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLeftHandleDragStart","handleDragStart","setState","dragged","handleRightHandleDragStart","handleMainHandleDragStart","handleLeftHandleDragging","_this$snapshot","snapshot","startX","endX","minX","initialDragX","updateStartXHandler","newStartX","handleDragging","snapStartX","handleRightHandleDragging","_this$snapshot2","maxX","updateEndXHandler","newEndX","snapEndX","handleMainHandleDragging","_this$snapshot3","_this$props","deltaX","Math","max","min","handleDragEndAsClick","timeStamp","lastClickTimeStamp","_this$props2","updateMinXHandler","updateMaxXHandler","globalMinX","globalMaxX","ref","React","createRef","state","x0","x1","_this$props3","width","height","topHandle","toDomXCoord_Linear","leftHandleElem","rightHandleElem","mainHandleElem","documentInteractionElem","top","position","left","onMouseDown","marginLeft","mainLeft","mainWidth","src_lib_DragOverlay","Fragment","overflow","_this$props4","referenceFrame","current","getBoundingClientRect","fromDomXCoord_Linear","clientX","snap","snappedStartX","round","d0","abs","d1","d2","minDist","snappedEndX","App","handleUpdateStartX","s","handleUpdateEndX","e","handleUpdateMinX","handleUpdateMaxX","_this2","_this$state","react","type","value","onChange","Number","parseInt","target","step","parseFloat","onClick","String","lib","Component","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.e8a8e1df.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\"\nimport PropTypes from 'prop-types'\n// CSS\nimport \"./DragOverlay.css\"\n\nclass DragOverlay extends PureComponent {\n  render() {\n    let { cursor} = this.props\n    return <div className=\"fullscreen\" style={{cursor:cursor}}></div>\n  }\n\n  componentDidMount(){\n    document.addEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.addEventListener(\"mouseup\",this.handleMouseUp,true)\n    //document.addEventListener(\"DOMMouseScroll\",this.ignoreScroll)\n  }\n\n  componentWillUnmount(){\n    document.removeEventListener(\"mousemove\",this.handleMouseMove,true)\n    document.removeEventListener(\"mouseup\",this.handleMouseUp,true)\n    //document.removeEventListener(\"DOMMouseScroll\",this.ignoreScroll)\n  }\n  \n  handleMouseMove = (ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation()\n    let {mouseMoveHandler} = this.props\n    mouseMoveHandler(ev)\n  }\n\n  handleMouseUp = (ev)=>{\n    ev.preventDefault();\n    ev.stopPropagation()\n    let {mouseUpHandler} = this.props\n    mouseUpHandler(ev)\n  }\n  \n  ignoreScroll(ev){\n    ev.preventDefault();\n    ev.stopPropagation();\n  }\n}\n\n\nDragOverlay.propTypes = {\n  cursor: PropTypes.string.isRequired,\n  mouseMoveHandler: PropTypes.func.isRequired,\n  mouseUpHandler: PropTypes.func.isRequired\n}\n\nexport default DragOverlay\n","import OnPlotXRanger from \"./OnPlotXRanger\";\n\nexport default OnPlotXRanger;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {toDomXCoord_Linear,\n        fromDomXCoord_Linear} from \"plot-utils\";\n// Components\nimport DragOverlay from \"./DragOverlay\";\n// CSS\nimport \"./OnPlotXRanger.css\";\n\nconst SIDE_HANDLE_WIDTH = 7;\nconst TOP_HANDLE_HEIGHT = 7;\n\nclass OnPlotXRanger extends PureComponent {\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n    this.state = {dragged:null};\n    this.lastClickTimeStamp = null;\n    this.snapshot = {};\n  }\n  \n  render() {\n    let { minX,maxX,\n          width,height,\n          startX,endX,\n          topHandle\n          } = this.props;\n    let {dragged} = this.state;\n    // Calculate positions\n    let x0,x1;\n    x0 = toDomXCoord_Linear(width,minX,maxX,startX);\n    x1 = toDomXCoord_Linear(width,minX,maxX,endX);\n    // Create elements\n    let leftHandleElem = null;\n    let rightHandleElem = null;\n    let mainHandleElem = null;\n    let documentInteractionElem = null;\n    let top = topHandle ? TOP_HANDLE_HEIGHT : 0;\n    // Left handle\n    if (x0>=0 && x0<=width) {\n      leftHandleElem = <div style={{position:\"absolute\",\n                                    left:x0,\n                                    top:top,\n                                    width:SIDE_HANDLE_WIDTH,\n                                    height:height-top}}\n                            className=\"leftHandle\"\n                            onMouseDown={this.handleLeftHandleDragStart}\n                            >\n                       </div>;\n    }\n    if ( x1>=0 && x1<=width ) {\n      rightHandleElem = <div  style={{position:\"absolute\",\n                                      left:x1,\n                                      marginLeft:-SIDE_HANDLE_WIDTH,\n                                      top:top,\n                                      width:SIDE_HANDLE_WIDTH,\n                                      height:height-top}}\n                              className=\"rightHandle\"\n                              onMouseDown={this.handleRightHandleDragStart}\n                              >\n                       </div>;\n    }\n    let mainLeft = Math.min(x0,x1-SIDE_HANDLE_WIDTH);\n    let mainRight = Math.max(x1,x0+SIDE_HANDLE_WIDTH);\n    let mainWidth = mainRight-mainLeft;\n    if ( !(x0>width || 0>x1) ) {\n      mainHandleElem = <div style={{position:\"absolute\",\n                                    left:mainLeft,\n                                    top:0,\n                                    width:mainWidth,\n                                    height:height}}\n                            className=\"mainHandle\"\n                            onMouseDown={this.handleMainHandleDragStart}\n                            >\n                       </div>;\n    }\n    \n    switch (dragged) {\n      case \"left\":\n        documentInteractionElem = <DragOverlay mouseMoveHandler={this.handleLeftHandleDragging} mouseUpHandler={this.handleDragEndAsClick} cursor=\"w-resize\"/>;\n        break;\n      case \"right\":\n        documentInteractionElem = <DragOverlay mouseMoveHandler={this.handleRightHandleDragging} mouseUpHandler={this.handleDragEndAsClick} cursor=\"e-resize\"/>;\n        break;\n      case \"main\":\n        documentInteractionElem = <DragOverlay mouseMoveHandler={this.handleMainHandleDragging} mouseUpHandler={this.handleDragEndAsClick} cursor=\"ew-resize\"/>;\n        break;\n      default:\n        break;\n    }\n    \n    return (\n      <>\n        <div ref={this.ref} style={{overflow:\"hidden\",position:\"relative\",height:height,width:width,top:0,left:0}}>\n          {mainHandleElem}\n          {leftHandleElem}\n          {rightHandleElem}\n        </div>\n        {documentInteractionElem}\n      </>\n    );\n  }\n  \n  handleDragStart(ev) {\n    ev.stopPropagation();\n    ev.preventDefault();\n    this.lastClickTimeStamp = ev.timeStamp;\n    let { width,minX,\n          maxX,startX,endX} = this.props;\n    let {snapshot} = this;\n    let referenceFrame = this.ref.current.getBoundingClientRect();\n    snapshot.referenceFrame = referenceFrame;\n    snapshot.width = width;\n    snapshot.minX = minX;\n    snapshot.maxX = maxX;\n    snapshot.startX = startX;\n    snapshot.endX = endX;\n    snapshot.initialDragX = fromDomXCoord_Linear(width,minX,maxX,ev.clientX-referenceFrame.left);\n  }\n  handleLeftHandleDragStart = (ev)=>{\n    this.handleDragStart(ev);\n    this.setState({dragged:\"left\"});\n  }\n  handleRightHandleDragStart = (ev)=>{\n    this.handleDragStart(ev);\n    this.setState({dragged:\"right\"});\n  }\n  handleMainHandleDragStart = (ev)=>{\n    this.handleDragStart(ev);\n    this.setState({dragged:\"main\"});\n  }\n  \n  handleDragging(ev){\n    ev.stopPropagation();\n    ev.preventDefault();\n    let {snapshot} = this;\n    let { width,minX,maxX,\n          referenceFrame\n          } = snapshot;\n    let curDragX = fromDomXCoord_Linear(width,minX,maxX,ev.clientX-referenceFrame.left);\n    return curDragX;\n  }\n  \n  handleLeftHandleDragging = (ev)=>{\n    let { startX,endX,\n          minX,\n          initialDragX} = this.snapshot;\n    let {updateStartXHandler} = this.props;\n    let curDragX = this.handleDragging(ev);\n    let newStartX = curDragX -initialDragX + startX;\n    newStartX = this.snapStartX(newStartX,minX,endX);\n    updateStartXHandler(newStartX);\n  }\n  handleRightHandleDragging = (ev)=>{\n    let { startX,endX,\n          maxX,\n          initialDragX} = this.snapshot;\n    let {updateEndXHandler} = this.props;\n    let curDragX = this.handleDragging(ev);\n    let newEndX = curDragX -initialDragX + endX;\n    newEndX = this.snapEndX(newEndX,startX,maxX);\n    updateEndXHandler(newEndX);\n  }\n  handleMainHandleDragging = (ev)=>{\n    let { startX,endX,\n          minX,maxX,\n          initialDragX} = this.snapshot;\n    let {updateStartXHandler,updateEndXHandler} = this.props;\n    let curDragX = this.handleDragging(ev);\n    let deltaX = curDragX - initialDragX;\n    deltaX = Math.max(Math.min(deltaX,maxX-endX),minX-startX);\n    updateStartXHandler(startX+deltaX);\n    updateEndXHandler(endX+deltaX);\n  }\n  \n  handleDragEndAsClick = (ev)=>{\n    ev.stopPropagation();\n    ev.preventDefault();\n    this.setState({dragged:null});\n    // If it is a click, flip range\n    if (ev.timeStamp - this.lastClickTimeStamp < 100){\n      let { updateMinXHandler,updateMaxXHandler,\n            startX,endX,\n            minX,maxX,\n            globalMinX,globalMaxX} = this.props;\n      if (startX===minX && endX===maxX) {\n        updateMinXHandler(globalMinX);\n        updateMaxXHandler(globalMaxX);\n      }\n      else {\n        updateMinXHandler(startX);\n        updateMaxXHandler(endX);\n      }\n    }\n  }\n\n  snapStartX(newStartX,minX,endX) {\n    let {snap} = this.props;\n    newStartX = Math.max(Math.min(newStartX,endX),minX);\n    let snappedStartX = Math.round(newStartX/snap) * snap;\n    if (snappedStartX>=endX) {\n      snappedStartX = snappedStartX - snap;\n    }\n    if (snappedStartX<=minX) {\n      snappedStartX = snappedStartX + snap;\n    }\n    let d0 = Math.abs(newStartX-minX);\n    let d1 = Math.abs(snappedStartX-newStartX);\n    let d2 = Math.abs(newStartX-(endX-snap));\n    let minDist = Math.min(d0,d1,d2);\n    if (d0 === minDist) {\n      return minX;\n    }\n    if (d1 === minDist) {\n      return snappedStartX;\n    }\n    if (d2 === minDist) {\n      return endX-snap;\n    }\n    return snappedStartX;\n  }\n  \n  snapEndX(newEndX,startX,maxX) {\n    let {snap} = this.props;\n    newEndX = Math.max(Math.min(newEndX,maxX),startX);\n    let snappedEndX = Math.round(newEndX/snap) * snap;\n    if (snappedEndX>=maxX) {\n      snappedEndX = snappedEndX - snap;\n    }\n    if (snappedEndX<=startX) {\n      snappedEndX = snappedEndX + snap;\n    }\n    let d0 = Math.abs(newEndX-(startX+snap));\n    let d1 = Math.abs(snappedEndX-newEndX);\n    let d2 = Math.abs(newEndX-maxX);\n    let minDist = Math.min(d0,d1,d2);\n    if (d0 === minDist) {\n      return startX+snap;\n    }\n    if (d1 === minDist) {\n      return snappedEndX;\n    }\n    if (d2 === minDist) {\n      return maxX;\n    }\n    return snappedEndX;\n  }\n}\n\nOnPlotXRanger.propTypes = {\n  globalMinX: PropTypes.number.isRequired,\n  globalMaxX: PropTypes.number.isRequired,\n  minX: PropTypes.number.isRequired,\n  maxX: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  startX: PropTypes.number.isRequired,\n  endX: PropTypes.number.isRequired,\n  snap: PropTypes.number.isRequired,\n  topHandle: PropTypes.bool.isRequired,\n  updateStartXHandler: PropTypes.func.isRequired,\n  updateEndXHandler: PropTypes.func.isRequired,\n  updateMinXHandler: PropTypes.func.isRequired,\n  updateMaxXHandler: PropTypes.func.isRequired,\n}\n\nexport default OnPlotXRanger;\n","import React, {Component,Fragment} from 'react';\nimport ReactDOM from 'react-dom';\n\nimport OnPlotXRanger from \"./lib\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {minX: 0,\n                  maxX: 10000,\n                  width: 1000,\n                  height: 400,\n                  startX: 100,\n                  endX: 200,\n                  globalMinX: 0,\n                  globalMaxX: 10000,\n                  snap: 1000,\n                  topHandle: true,\n                  };\n  }\n  \n  render() {\n    let { globalMinX,globalMaxX,\n          minX,maxX,\n          width,height,\n          startX,endX,\n          snap,\n          topHandle\n          } = this.state;\n    return (\n      <Fragment>\n        <div>\n          globalMinX: {globalMinX}\n          <input type=\"range\" min={0} max={5000} value={globalMinX} onChange={(ev)=>this.setState({globalMinX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          globalMaxX: {globalMaxX}\n          <input type=\"range\" min={minX} max={10000} value={globalMaxX} onChange={(ev)=>this.setState({globalMaxX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          minX: {minX}\n          <input type=\"range\" min={0} max={5000} value={minX} onChange={(ev)=>this.setState({minX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          maxX: {maxX}\n          <input type=\"range\" min={minX} max={10000} value={maxX} onChange={(ev)=>this.setState({maxX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          snap: {snap}\n          <input type=\"range\" min={10} max={200} step={10} value={snap} onChange={(ev)=>this.setState({snap:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          width: {width}\n          <input type=\"range\" min={100} max={1000} step={10} value={width} onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          height: {height}\n          <input type=\"range\" min={100} max={400} step={10} value={height} onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          startX: {startX}\n          <input type=\"range\" min={minX} max={endX} step={10} value={startX} onChange={(ev)=>this.setState({startX:Number.parseInt(ev.target.value)})}/>\n        </div>\n        <div>\n          endX: {endX}\n          <input type=\"range\" min={startX} max={maxX} step={10} value={endX} onChange={(ev)=>this.setState({endX:Number.parseFloat(ev.target.value)})}/>\n        </div>\n        <div>\n          topHandle:\n          <button type=\"button\" onClick={(ev)=>this.setState({topHandle:!topHandle})}>\n            {String(topHandle)}\n          </button>\n        </div>\n        <br/>\n        <OnPlotXRanger  globalMinX={globalMinX}\n                        globalMaxX={globalMaxX}\n                        minX={minX}\n                        maxX={maxX}\n                        snap={snap}\n                        width={width}\n                        height={height}\n                        startX={startX}\n                        endX={endX}\n                        topHandle={topHandle}\n                        updateStartXHandler={this.handleUpdateStartX}\n                        updateEndXHandler={this.handleUpdateEndX}\n                        updateMinXHandler={this.handleUpdateMinX}\n                        updateMaxXHandler={this.handleUpdateMaxX}\n                        />\n      </Fragment>\n    );\n  }\n  \n  handleUpdateStartX = (s)=>{\n    this.setState({startX:s});\n  }\n  \n  handleUpdateEndX = (e)=>{\n    this.setState({endX:e});\n  }\n  \n  handleUpdateMinX = (minX)=>{\n    this.setState({minX:minX});\n  }\n  \n  handleUpdateMaxX = (maxX)=>{\n    this.setState({maxX:maxX});\n  }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}